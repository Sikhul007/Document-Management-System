@model DMS_Final.Models.DocumentModel
@{
    ViewBag.Title = "Upload Document";
    var tagListJson = System.Text.Json.JsonSerializer.Serialize((List<DMS_Final.Models.TagModel>)ViewBag.Tags);
}

<div class="container-fluid py-4">
    <h2 class="mb-4 fw-bold text-primary">📂 Upload Document</h2>

    <form id="uploadForm" asp-action="UploadDocument" asp-controller="Document" method="post" enctype="multipart/form-data">
        <div class="mb-3">
            <label class="form-label fw-bold">Title <span class="text-danger">*</span></label>
            <input asp-for="Title" class="form-control form-control-lg" required />
            <span asp-validation-for="Title" class="text-danger small"></span>
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Description <span class="text-danger">*</span></label>
            <textarea asp-for="Description" rows="3" class="form-control form-control-lg"></textarea>
        </div>

        <hr class="my-4" />

        <div id="fileFields">
            <div class="file-group p-3 mb-3 bg-light border rounded" data-index="0">
                <div class="mb-3">
                    <label class="form-label fw-bold">File <span class="text-danger">*</span></label>
                    <input type="file" name="Files" class="form-control form-control-lg" required />
                    <span class="text-danger small" data-valmsg-for="Files" data-valmsg-replace="true"></span>
                </div>

                <div class="mb-3">
                    <label class="form-label fw-bold">File Description <span class="text-danger">*</span></label>
                    <input type="text" name="FileDescriptions" class="form-control form-control-lg" required />
                    <span class="text-danger small" data-valmsg-for="FileDescriptions" data-valmsg-replace="true"></span>
                </div>

                <div class="mb-3 tags-group">
                    <label class="form-label fw-bold">Tags <span class="text-danger">*</span></label>
                    <select name="TagIds[0]" class="form-control tag-select" multiple="multiple" style="width: 100%">
                        @foreach (var tag in (List<DMS_Final.Models.TagModel>)ViewBag.Tags)
                        {
                            <option value="@tag.Id">@tag.Name</option>
                        }
                    </select>
                    <div class="text-danger small validation-message" style="display: none;">At least one tag is required.</div>
                </div>

                <button type="button" class="btn btn-danger btn-sm remove-btn d-none" onclick="removeField(this)">
                    <i class="bi bi-dash-circle"></i> Remove
                </button>
            </div>
        </div>

        <button type="button" class="btn btn-outline-primary btn-sm mb-4" onclick="addField()">
            <i class="bi bi-plus-circle"></i> Add Another File
        </button>

        <div class="text-end">
            <button type="submit" class="btn btn-success btn-lg px-5">
                <i class="bi bi-upload"></i> Upload
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
    <partial name="_ValidationScriptsPartial" />

    <script>
        const tagList = @Html.Raw(tagListJson);

        function getTagOptionsHtml() {
            return tagList.map(tag => `<option value="${tag.Id}">${tag.Name}</option>`).join('');
        }

        let fileIndex = 1;

        function addField() {
            const container = document.getElementById('fileFields');
            const group = document.createElement('div');
            group.className = 'file-group p-3 mb-3 bg-light border rounded';
            group.setAttribute('data-index', fileIndex);

            group.innerHTML = `
                <div class="mb-3">
                    <label class="form-label fw-bold">File <span class="text-danger">*</span></label>
                    <input type="file" name="Files" class="form-control form-control-lg" required />
                    <span class="text-danger small" data-valmsg-for="Files" data-valmsg-replace="true"></span>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">File Description <span class="text-danger">*</span></label>
                    <input type="text" name="FileDescriptions" class="form-control form-control-lg" required />
                    <span class="text-danger small" data-valmsg-for="FileDescriptions" data-valmsg-replace="true"></span>
                </div>
                <div class="mb-3 tags-group">
                    <label class="form-label fw-bold">Tags <span class="text-danger">*</span></label>
                    <select name="TagIds[${fileIndex}]" class="form-control tag-select" multiple="multiple" style="width: 100%">${getTagOptionsHtml()}</select>
                    <div class="text-danger small validation-message" style="display: none;">At least one tag is required.</div>
                </div>
                <button type="button" class="btn btn-danger btn-sm remove-btn" onclick="removeField(this)">
                    <i class="bi bi-dash-circle"></i> Remove
                </button>
            `;
            container.appendChild(group);

            $(group).find('.tag-select').select2({
                placeholder: "Select tags",
                allowClear: true
            });

            // Show remove button on all groups when there's more than one
            updateRemoveButtons();

            fileIndex++;
        }

        function removeField(btn) {
            btn.closest('.file-group').remove();
            updateRemoveButtons();
        }

        function updateRemoveButtons() {
            const groups = document.querySelectorAll('.file-group');
            groups.forEach((group, index) => {
                const removeBtn = group.querySelector('.remove-btn');
                if (groups.length > 1) {
                    removeBtn.classList.remove('d-none');
                } else {
                    removeBtn.classList.add('d-none');
                }
            });
        }

        $(document).ready(function () {
            $('.tag-select').select2({
                placeholder: "Select tags",
                allowClear: true
            });

            // Client-side validation for Select2 fields
            $('#uploadForm').on('submit', function (e) {
                let isValid = true;

                // This ensures the default validation for standard inputs is also checked
                if (!$(this).valid()) {
                    isValid = false;
                }

                // Iterate over each file-group
                $('.file-group').each(function() {
                    const tagSelect = $(this).find('.tag-select');
                    const validationMessage = $(this).find('.validation-message');

                    // Select2 returns an empty array for no selections
                    if (tagSelect.val() === null || tagSelect.val().length === 0) {
                        validationMessage.show();
                        // Add a border to the Select2 container for visual feedback
                        tagSelect.next('.select2-container').find('.select2-selection').css('border-color', '#dc3545');
                        isValid = false;
                    } else {
                        validationMessage.hide();
                        tagSelect.next('.select2-container').find('.select2-selection').css('border-color', '');
                    }
                });

                if (!isValid) {
                    e.preventDefault(); // Stop form submission
                    $('html, body').animate({
                        scrollTop: $('.text-danger:visible, .validation-message:visible').first().offset().top - 200
                    }, 500);
                }
            });

            // Hide validation message on change
            $(document).on('change', '.tag-select', function() {
                const tagSelect = $(this);
                const validationMessage = tagSelect.closest('.tags-group').find('.validation-message');
                if (tagSelect.val() !== null && tagSelect.val().length > 0) {
                    validationMessage.hide();
                    tagSelect.next('.select2-container').find('.select2-selection').css('border-color', '');
                }
            });
        });
    </script>
}