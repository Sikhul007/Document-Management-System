@* @model DMS_Final.Models.DocumentModel
@{
    ViewBag.Title = "Upload Document";
    var tagListJson = System.Text.Json.JsonSerializer.Serialize((List<DMS_Final.Models.TagModel>)ViewBag.Tags);
}

<div class="container-fluid py-4">
    <h2 class="mb-4 fw-bold text-primary">📂 Upload Document</h2>

    <form id="uploadForm" asp-action="UploadDocument" asp-controller="Document" method="post" enctype="multipart/form-data">
        <div class="mb-3">
            <label class="form-label fw-bold">Title <span class="text-danger">*</span></label>
            <input asp-for="Title" class="form-control form-control-lg" required />
            <span asp-validation-for="Title" class="text-danger small"></span>
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Description <span class="text-danger">*</span></label>
            <textarea asp-for="Description" rows="3" class="form-control form-control-lg"></textarea>
        </div>

        <hr class="my-4" />

        <div id="fileFields">
            <div class="file-group p-3 mb-3 bg-light border rounded" data-index="0">
                <div class="mb-3">
                    <label class="form-label fw-bold">File <span class="text-danger">*</span></label>
                    <input type="file" name="Files" class="form-control form-control-lg" required />
                    <span class="text-danger small" data-valmsg-for="Files" data-valmsg-replace="true"></span>
                </div>

                <div class="mb-3">
                    <label class="form-label fw-bold">File Description <span class="text-danger">*</span></label>
                    <input type="text" name="FileDescriptions" class="form-control form-control-lg" required />
                    <span class="text-danger small" data-valmsg-for="FileDescriptions" data-valmsg-replace="true"></span>
                </div>

                <div class="mb-3 tags-group">
                    <label class="form-label fw-bold">Tags <span class="text-danger">*</span></label>
                    <select name="TagIds[0]" class="form-control tag-select" multiple="multiple" style="width: 100%">
                        @foreach (var tag in (List<DMS_Final.Models.TagModel>)ViewBag.Tags)
                        {
                            <option value="@tag.Id">@tag.Name</option>
                        }
                    </select>
                    <div class="text-danger small validation-message" style="display: none;">At least one tag is required.</div>
                </div>

                <button type="button" class="btn btn-danger btn-sm remove-btn d-none" onclick="removeField(this)">
                    <i class="bi bi-dash-circle"></i> Remove
                </button>
            </div>
        </div>

        <button type="button" class="btn btn-outline-primary btn-sm mb-4" onclick="addField()">
            <i class="bi bi-plus-circle"></i> Add Another File
        </button>

        <div class="text-end">
            <button type="submit" class="btn btn-success btn-lg px-5">
                <i class="bi bi-upload"></i> Upload
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
    <partial name="_ValidationScriptsPartial" />

    <script>
        const tagList = @Html.Raw(tagListJson);

        function getTagOptionsHtml() {
            return tagList.map(tag => `<option value="${tag.Id}">${tag.Name}</option>`).join('');
        }

        let fileIndex = 1;

        function addField() {
            const container = document.getElementById('fileFields');
            const group = document.createElement('div');
            group.className = 'file-group p-3 mb-3 bg-light border rounded';
            group.setAttribute('data-index', fileIndex);

            group.innerHTML = `
                <div class="mb-3">
                    <label class="form-label fw-bold">File <span class="text-danger">*</span></label>
                    <input type="file" name="Files" class="form-control form-control-lg" required />
                    <span class="text-danger small" data-valmsg-for="Files" data-valmsg-replace="true"></span>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">File Description <span class="text-danger">*</span></label>
                    <input type="text" name="FileDescriptions" class="form-control form-control-lg" required />
                    <span class="text-danger small" data-valmsg-for="FileDescriptions" data-valmsg-replace="true"></span>
                </div>
                <div class="mb-3 tags-group">
                    <label class="form-label fw-bold">Tags <span class="text-danger">*</span></label>
                    <select name="TagIds[${fileIndex}]" class="form-control tag-select" multiple="multiple" style="width: 100%">${getTagOptionsHtml()}</select>
                    <div class="text-danger small validation-message" style="display: none;">At least one tag is required.</div>
                </div>
                <button type="button" class="btn btn-danger btn-sm remove-btn" onclick="removeField(this)">
                    <i class="bi bi-dash-circle"></i> Remove
                </button>
            `;
            container.appendChild(group);

            $(group).find('.tag-select').select2({
                placeholder: "Select tags",
                allowClear: true
            });

            // Show remove button on all groups when there's more than one
            updateRemoveButtons();

            fileIndex++;
        }

        function removeField(btn) {
            btn.closest('.file-group').remove();
            updateRemoveButtons();
        }

        function updateRemoveButtons() {
            const groups = document.querySelectorAll('.file-group');
            groups.forEach((group, index) => {
                const removeBtn = group.querySelector('.remove-btn');
                if (groups.length > 1) {
                    removeBtn.classList.remove('d-none');
                } else {
                    removeBtn.classList.add('d-none');
                }
            });
        }

        $(document).ready(function () {
            $('.tag-select').select2({
                placeholder: "Select tags",
                allowClear: true
            });

            // Client-side validation for Select2 fields
            $('#uploadForm').on('submit', function (e) {
                let isValid = true;

                // This ensures the default validation for standard inputs is also checked
                if (!$(this).valid()) {
                    isValid = false;
                }

                // Iterate over each file-group
                $('.file-group').each(function() {
                    const tagSelect = $(this).find('.tag-select');
                    const validationMessage = $(this).find('.validation-message');

                    // Select2 returns an empty array for no selections
                    if (tagSelect.val() === null || tagSelect.val().length === 0) {
                        validationMessage.show();
                        // Add a border to the Select2 container for visual feedback
                        tagSelect.next('.select2-container').find('.select2-selection').css('border-color', '#dc3545');
                        isValid = false;
                    } else {
                        validationMessage.hide();
                        tagSelect.next('.select2-container').find('.select2-selection').css('border-color', '');
                    }
                });

                if (!isValid) {
                    e.preventDefault(); // Stop form submission
                    $('html, body').animate({
                        scrollTop: $('.text-danger:visible, .validation-message:visible').first().offset().top - 200
                    }, 500);
                }
            });

            // Hide validation message on change
            $(document).on('change', '.tag-select', function() {
                const tagSelect = $(this);
                const validationMessage = tagSelect.closest('.tags-group').find('.validation-message');
                if (tagSelect.val() !== null && tagSelect.val().length > 0) {
                    validationMessage.hide();
                    tagSelect.next('.select2-container').find('.select2-selection').css('border-color', '');
                }
            });
        });
    </script>
} *@
















@model DMS_Final.Models.DocumentModel
@{
    ViewBag.Title = "Upload Document";
    var tagListJson = System.Text.Json.JsonSerializer.Serialize((List<DMS_Final.Models.TagModel>)ViewBag.Tags);
}

<div class="container-fluid py-4">
    <h2 class="mb-4 fw-bold text-primary">📂 Upload Document</h2>

    <form id="uploadForm" asp-action="UploadDocument" asp-controller="Document" method="post" enctype="multipart/form-data">
        <div class="mb-3">
            <label class="form-label fw-bold">Title <span class="text-danger">*</span></label>
            <input asp-for="Title" class="form-control form-control-lg" required />
            <span asp-validation-for="Title" class="text-danger small"></span>
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Description <span class="text-danger">*</span></label>
            <textarea asp-for="Description" rows="3" class="form-control form-control-lg"></textarea>
        </div>

        <hr class="my-4" />

        <div id="fileFields">
            <div class="file-group p-3 mb-3 bg-light border rounded" data-index="0">
                <div class="mb-3">
                    <label class="form-label fw-bold">File <span class="text-danger">*</span></label>
                    <input type="file" name="Files" class="form-control form-control-lg" required />
                    <span class="text-danger small" data-valmsg-for="Files" data-valmsg-replace="true"></span>
                </div>

                <div class="mb-3">
                    <label class="form-label fw-bold">File Description <span class="text-danger">*</span></label>
                    <input type="text" name="FileDescriptions" class="form-control form-control-lg" required />
                    <span class="text-danger small" data-valmsg-for="FileDescriptions" data-valmsg-replace="true"></span>
                </div>

                <div class="mb-3 tags-group">
                    <label class="form-label fw-bold">Tags <span class="text-danger">*</span></label>
                    <select name="TagIds[0]" class="form-control tag-select" multiple="multiple" style="width: 100%">
                        @foreach (var tag in (List<DMS_Final.Models.TagModel>)ViewBag.Tags)
                        {
                            <option value="@tag.Id">@tag.Name</option>
                        }
                    </select>
                    <div class="text-danger small validation-message" style="display: none;">At least one tag is required.</div>
                </div>

                <button type="button" class="btn btn-danger btn-sm remove-btn d-none" onclick="removeField(this)">
                    <i class="bi bi-dash-circle"></i> Remove
                </button>
            </div>
        </div>

        <button type="button" class="btn btn-outline-primary btn-sm mb-4" onclick="addField()">
            <i class="bi bi-plus-circle"></i> Add Another File
        </button>

        <div class="text-end">
            <button type="submit" class="btn btn-success btn-lg px-5">
                <i class="bi bi-upload"></i> Upload
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
    <partial name="_ValidationScriptsPartial" />

    <script>
        let tagList = @Html.Raw(tagListJson);

        function getTagOptionsHtml() {
            return tagList.map(tag => `<option value="${tag.Id}">${tag.Name}</option>`).join('');
        }

        let fileIndex = 1;

        function addField() {
            const container = document.getElementById('fileFields');
            const group = document.createElement('div');
            group.className = 'file-group p-3 mb-3 bg-light border rounded';
            group.setAttribute('data-index', fileIndex);

            group.innerHTML = `
                <div class="mb-3">
                    <label class="form-label fw-bold">File <span class="text-danger">*</span></label>
                    <input type="file" name="Files" class="form-control form-control-lg" required />
                    <span class="text-danger small" data-valmsg-for="Files" data-valmsg-replace="true"></span>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">File Description <span class="text-danger">*</span></label>
                    <input type="text" name="FileDescriptions" class="form-control form-control-lg" required />
                    <span class="text-danger small" data-valmsg-for="FileDescriptions" data-valmsg-replace="true"></span>
                </div>
                <div class="mb-3 tags-group">
                    <label class="form-label fw-bold">Tags <span class="text-danger">*</span></label>
                    <select name="TagIds[${fileIndex}]" class="form-control tag-select" multiple="multiple" style="width: 100%">${getTagOptionsHtml()}</select>
                    <div class="text-danger small validation-message" style="display: none;">At least one tag is required.</div>
                </div>
                <button type="button" class="btn btn-danger btn-sm remove-btn" onclick="removeField(this)">
                    <i class="bi bi-dash-circle"></i> Remove
                </button>
            `;
            container.appendChild(group);

            initializeTagSelect($(group).find('.tag-select'));

            // Show remove button on all groups when there's more than one
            updateRemoveButtons();

            fileIndex++;
        }

        function removeField(btn) {
            btn.closest('.file-group').remove();
            updateRemoveButtons();
        }

        function updateRemoveButtons() {
            const groups = document.querySelectorAll('.file-group');
            groups.forEach((group, index) => {
                const removeBtn = group.querySelector('.remove-btn');
                if (groups.length > 1) {
                    removeBtn.classList.remove('d-none');
                } else {
                    removeBtn.classList.add('d-none');
                }
            });
        }

        function initializeTagSelect($element) {
            $element.select2({
                placeholder: "Search or type new tags",
                allowClear: true,
                tags: true,
                tokenSeparators: [','],
                minimumInputLength: 0,
                ajax: {
                    delay: 250,
                    transport: function (params, success, failure) {
                        var searchTerm = params.data.term || '';
                        
                        // Filter existing tags based on search term
                        var filteredTags = tagList.filter(function(tag) {
                            return tag.Name.toLowerCase().includes(searchTerm.toLowerCase());
                        }).map(function(tag) {
                            return {
                                id: tag.Id,
                                text: tag.Name
                            };
                        });
                        
                        success({
                            results: filteredTags
                        });
                    }
                },
                createTag: function (params) {
                    var term = $.trim(params.term);
                    if (term === '') {
                        return null;
                    }

                    // Check if tag already exists (case insensitive)
                    var existingTag = tagList.find(tag =>
                        tag.Name.toLowerCase() === term.toLowerCase()
                    );

                    if (existingTag) {
                        return {
                            id: existingTag.Id,
                            text: existingTag.Name
                        };
                    }

                    // Return new tag option
                    return {
                        id: term,
                        text: term,
                        newTag: true
                    };
                },
                insertTag: function (data, tag) {
                    // Insert the tag at the end
                    data.push(tag);
                }
            });

            // Handle when user presses Enter to create new tag
            $element.on('select2:close', function (e) {
                var $search = $(this).parent().find('.select2-search__field');
                var searchTerm = $.trim($search.val());
                
                if (searchTerm && searchTerm.length > 0) {
                    // Check if this term already exists
                    var existingTag = tagList.find(tag =>
                        tag.Name.toLowerCase() === searchTerm.toLowerCase()
                    );
                    
                    if (!existingTag) {
                        // Check if it's already selected
                        var currentValues = $(this).val() || [];
                        if (!currentValues.includes(searchTerm)) {
                            // Add as new tag
                            var newOption = new Option(searchTerm, searchTerm, true, true);
                            $(newOption).attr('data-select2-tag', true);
                            $(this).append(newOption);
                            $(this).trigger('change');
                            
                            // Clear the search box
                            $search.val('');
                        }
                    }
                }
            });

            // Handle selection of new tags
            $element.on('select2:select', function (e) {
                var data = e.params.data;
                
                // Check if this is a new tag (either has newTag flag or is a Select2 tag)
                if (data.newTag || $(e.target).find('option[value="' + data.id + '"]').attr('data-select2-tag')) {
                    // Create new tag via AJAX
                    $.ajax({
                        url: '@Url.Action("CreateTag", "Document")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ TagName: data.text }),
                        success: function (response) {
                            if (response.success) {
                                // Add to tagList array
                                tagList.push({
                                    Id: response.tag.id,
                                    Name: response.tag.text
                                });

                                // Update the option value with the new ID
                                var $option = $element.find('option[value="' + data.id + '"]');
                                $option.val(response.tag.id);
                                $option.removeAttr('data-select2-tag');

                                // Update all other selects with the new tag
                                $('.tag-select').each(function() {
                                    if (this !== $element[0]) {
                                        $(this).append(new Option(response.tag.text, response.tag.id, false, false));
                                    }
                                });

                                console.log('New tag created:', response.tag);
                            } else {
                                console.error('Error creating tag:', response.message);
                                // Remove the tag from selection if creation failed
                                var values = $element.val() || [];
                                values = values.filter(v => v !== data.id);
                                $element.val(values).trigger('change');
                                alert('Error creating tag: ' + response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error creating tag:', error);
                            // Remove the tag from selection if creation failed
                            var values = $element.val() || [];
                            values = values.filter(v => v !== data.id);
                            $element.val(values).trigger('change');
                            alert('Error creating tag. Please try again.');
                        }
                    });
                }
            });
        }

        $(document).ready(function () {
            // Initialize all existing tag selects
            $('.tag-select').each(function() {
                initializeTagSelect($(this));
            });

            // Client-side validation for Select2 fields
            $('#uploadForm').on('submit', function (e) {
                let isValid = true;

                // This ensures the default validation for standard inputs is also checked
                if (!$(this).valid()) {
                    isValid = false;
                }

                // Iterate over each file-group
                $('.file-group').each(function() {
                    const tagSelect = $(this).find('.tag-select');
                    const validationMessage = $(this).find('.validation-message');

                    // Select2 returns an empty array for no selections
                    if (tagSelect.val() === null || tagSelect.val().length === 0) {
                        validationMessage.show();
                        // Add a border to the Select2 container for visual feedback
                        tagSelect.next('.select2-container').find('.select2-selection').css('border-color', '#dc3545');
                        isValid = false;
                    } else {
                        validationMessage.hide();
                        tagSelect.next('.select2-container').find('.select2-selection').css('border-color', '');
                    }
                });

                if (!isValid) {
                    e.preventDefault(); // Stop form submission
                    $('html, body').animate({
                        scrollTop: $('.text-danger:visible, .validation-message:visible').first().offset().top - 200
                    }, 500);
                }
            });

            // Hide validation message on change
            $(document).on('change', '.tag-select', function() {
                const tagSelect = $(this);
                const validationMessage = tagSelect.closest('.tags-group').find('.validation-message');
                if (tagSelect.val() !== null && tagSelect.val().length > 0) {
                    validationMessage.hide();
                    tagSelect.next('.select2-container').find('.select2-selection').css('border-color', '');
                }
            });
        });
    </script>
    
}