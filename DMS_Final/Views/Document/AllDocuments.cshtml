@model IEnumerable<DMS_Final.Models.DocumentModel>

<div class="d-flex justify-content-between align-items-center mb-4 px-2 py-2 bg-light rounded shadow-sm">
    <h2 class="fw-bold text-primary mb-0">
        <i class="bi bi-folder2-open me-2"></i> All Documents
    </h2>
    <a asp-action="UploadDocument" asp-controller="Document" class="btn btn-success d-flex align-items-center gap-2">
        <i class="bi bi-plus-circle-fill"></i>
        <span>New Document</span>
    </a>
</div>

<div class="d-flex justify-content-end mb-3">
    <div style="position: relative; width: 250px;">
        <input type="text"
               id="documentSearch"
               class="form-control ps-5"
               placeholder="Search..."
               autocomplete="off"
               style="border-radius: 20px;">
        <span style="position: absolute; left: 15px; top: 50%; transform: translateY(-50%); color: #888;">
            <i class="bi bi-search"></i>
        </span>
    </div>
</div>

<div class="table-responsive" style="overflow-x: auto;">
    <table id="documentsTable" class="table table-hover table-bordered table-striped text-center align-middle mb-0"
       style="table-layout:fixed; width:100%;">
        <thead class="table-primary">
            <tr>
                <th class="text-start sortable" style="width:17%;" data-col="0" data-type="text">Title <span class="sort-indicator"></span></th>
                <th class="text-start text-nowrap sortable" style="width:17%;" data-col=" 1" data-type="date">Uploaded Date <span class="sort-indicator"></span></th>
                <th class="text-start text-nowrap sortable" style="width:47%;" data-col=" 2" data-type="text">Description <span class="sort-indicator"></span></th>
                <th class="text-start text-nowrap sortable" style="width:12%;" data-col=" 3" data-type="text">Created By <span class="sort-indicator"></span></th>
                <th class="text-start text-nowrap" style="width:7%;">Action</th>
            </tr>
        </thead>
        <tbody>
            @if (!Model.Any())
            {
                <tr>
                    <td colspan="5" class="text-center text-muted">No documents found.</td>
                </tr>
            }
            else
            {
                @foreach (var doc in Model)
                {
                    <tr>
                        <td class="text-start" style="width:17%;" data-sort-value="@doc.Title.ToLower()">@doc.Title</td>
                        <td class="text-start text-nowrap" style="width:17%;" data-sort-value="@doc.UploadedDate.ToString("o")">@doc.UploadedDate.ToString("dd MMM. yy hh:mm tt")</td>
                        <td class="text-start" style="width:47%;" data-sort-value="@doc.Description.ToLower()">@doc.Description</td>
                        <td class="text-start text-nowrap" style="width:12%;" data-sort-value="@doc.CreatedBy.ToLower()">@doc.CreatedBy</td>
                        <td class="text-start text-nowrap" style="width:7%;">
                            <a asp-controller="Document" asp-action="ShowDocumentDetails" asp-route-id="@doc.Id" class="btn btn-info btn-sm">
                                <i class="bi bi-eye-fill"></i>
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<!-- Pagination Controls -->
<div class="d-flex justify-content-between align-items-center mt-3">
    <div>
        Showing <span id="startRecord">1</span> to <span id="endRecord">5</span> of <span id="totalRecords">@(Model.Count())</span> entries
    </div>
    <div>
        <ul class="pagination mb-0">
            <li class="page-item"><a class="page-link" href="#" id="prevPage">Previous</a></li>
            <li class="page-item active"><a class="page-link" href="#" data-page="1">1</a></li>
            <li class="page-item"><a class="page-link" href="#" data-page="2">2</a></li>
            <li class="page-item"><a class="page-link" href="#" data-page="3">3</a></li>
            <li class="page-item"><a class="page-link" href="#" id="nextPage">Next</a></li>
        </ul>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        th.sortable {
            cursor: pointer;
            user-select: none;
            position: relative;
            padding-right: 25px !important;
        }

        .sort-indicator {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 0.8em;
            color: #007bff;
        }

        th.sortable:hover {
            background: #e3f2fd;
        }

        th.sorted-asc .sort-indicator::after {
            content: '▲';
            font-size: 0.7em;
        }

        th.sorted-desc .sort-indicator::after {
            content: '▼';
            font-size: 0.7em;
        }

        th.sortable[data-type="date"].sorted-asc .sort-indicator::after {
            content: '▲';
        }

        th.sortable[data-type="date"].sorted-desc .sort-indicator::after {
            content: '▼';
        }

        th.sortable:not(.sorted-asc):not(.sorted-desc) .sort-indicator::after {
            content: '⇅';
            opacity: 0.5;
        }

        .pagination .page-link {
            color: #007bff;
        }

        .pagination .page-item.active .page-link {
            background-color: #007bff;
            border-color: #007bff;
        }
    </style>
    <script>
        $(function () {
            // Pagination variables
            let currentPage = 1;
            const rowsPerPage = 5;
            let allRows = [];
            let filteredRows = [];

            // Initialize pagination
            function initPagination() {
                allRows = Array.from($('#documentsTable tbody tr'));
                filteredRows = [...allRows];
                updatePagination();
                showPage(currentPage);
            }

            // Show specific page
            function showPage(page) {
                const startIndex = (page - 1) * rowsPerPage;
                const endIndex = startIndex + rowsPerPage;

                // Hide all rows first
                $('#documentsTable tbody tr').hide();

                // Show only rows for current page
                filteredRows.slice(startIndex, endIndex).forEach(row => {
                    $(row).show();
                });

                // Update pagination info
                const totalRecords = filteredRows.length;
                const startRecord = totalRecords === 0 ? 0 : startIndex + 1;
                const endRecord = Math.min(endIndex, totalRecords);

                $('#startRecord').text(startRecord);
                $('#endRecord').text(endRecord);
                $('#totalRecords').text(totalRecords);
            }

            // Update pagination controls
            function updatePagination() {
                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
                const $pagination = $('.pagination');

                // Clear existing page items except prev/next
                $pagination.find('.page-item').not(':first, :last').remove();

                // Add page numbers
                for (let i = 1; i <= totalPages; i++) {
                    // Only show a limited number of page buttons
                    if (i === 1 || i === totalPages || (i >= currentPage - 1 && i <= currentPage + 1)) {
                        const $pageItem = $('<li class="page-item"><a class="page-link" href="#" data-page="' + i + '">' + i + '</a></li>');
                        if (i === currentPage) {
                            $pageItem.addClass('active');
                        }
                        $('#nextPage').parent().before($pageItem);
                    } else if (i === currentPage - 2 || i === currentPage + 2) {
                        const $ellipsis = $('<li class="page-item disabled"><a class="page-link" href="#">...</a></li>');
                        $('#nextPage').parent().before($ellipsis);
                    }
                }

                // Update prev/next button states
                $('#prevPage').parent().toggleClass('disabled', currentPage === 1);
                $('#nextPage').parent().toggleClass('disabled', currentPage === totalPages || totalPages === 0);
            }

            // Real-time search: all columns
            $('#documentSearch').on('input', function () {
                const search = $(this).val().toLowerCase();

                // Filter rows based on search term
                filteredRows = allRows.filter(row => {
                    const rowText = $(row).text().toLowerCase();
                    return rowText.includes(search);
                });

                // Reset to first page and update display
                currentPage = 1;
                updatePagination();
                showPage(currentPage);
            });

            // Sorting UI and logic
            let lastSortedCol = null;
            let asc = true;

            $('.sortable').on('click', function () {
                const col = $(this).data('col');
                const colType = $(this).data('type');

                // Toggle sort direction if same column clicked
                if (lastSortedCol === col) {
                    asc = !asc;
                } else {
                    asc = true;
                }

                // Update UI classes
                $('.sortable').removeClass('sorted-asc sorted-desc');
                $(this).addClass(asc ? 'sorted-asc' : 'sorted-desc');

                // Sort filtered rows
                filteredRows.sort(function (a, b) {
                    let valA = $(a).find('td').eq(col).data('sort-value');
                    let valB = $(b).find('td').eq(col).data('sort-value');

                    // If data-sort-value is not available, use text content
                    if (valA === undefined || valA === null) valA = $(a).find('td').eq(col).text();
                    if (valB === undefined || valB === null) valB = $(b).find('td').eq(col).text();

                    // Handle different column types
                    if (colType === 'date') {
                        // Date sorting
                        const dateA = new Date(valA);
                        const dateB = new Date(valB);
                        if (!isNaN(dateA) && !isNaN(dateB)) {
                            return asc ? dateA - dateB : dateB - dateA;
                        }
                    } else {
                        // Text sorting (A-Z / Z-A)
                        valA = valA.toString().toLowerCase();
                        valB = valB.toString().toLowerCase();

                        if (valA < valB) return asc ? -1 : 1;
                        if (valA > valB) return asc ? 1 : -1;
                        return 0;
                    }
                });

                // Reset to first page and update display
                currentPage = 1;
                updatePagination();
                showPage(currentPage);

                lastSortedCol = col;
            });

            // Pagination event handlers
            $(document).on('click', '#prevPage', function(e) {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    updatePagination();
                    showPage(currentPage);
                }
            });

            $(document).on('click', '#nextPage', function(e) {
                e.preventDefault();
                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    updatePagination();
                    showPage(currentPage);
                }
            });

            $(document).on('click', '.pagination .page-item:not(.disabled) .page-link[data-page]', function(e) {
                e.preventDefault();
                currentPage = parseInt($(this).data('page'));
                updatePagination();
                showPage(currentPage);
            });

            // Initialize pagination on page load
            initPagination();
        });
    </script>
}